//
//  StyleKit.swift
//  FontToBytes
//
//  Created by Lucky Resistor on 03/09/15.
//  Copyright (c) 2015 Lucky Resistor. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import Cocoa

open class StyleKit : NSObject {

    //// Cache

    fileprivate struct Cache {
        static let lRLightOrange: NSColor = NSColor(calibratedRed: 0.855, green: 0.667, blue: 0.443, alpha: 1)
        static let lROrange: NSColor = NSColor(calibratedRed: 0.761, green: 0.443, blue: 0.071, alpha: 1)
        static let lRBrown: NSColor = NSColor(calibratedRed: 0.569, green: 0.333, blue: 0.051, alpha: 1)
        static let lRBlue: NSColor = NSColor(calibratedRed: 0.145, green: 0.361, blue: 0.761, alpha: 1)
        static let lRWhite: NSColor = NSColor(calibratedRed: 0.969, green: 0.969, blue: 0.969, alpha: 1)
        static let lRGray1: NSColor = NSColor(calibratedRed: 0.478, green: 0.51, blue: 0.576, alpha: 1)
        static let lRGray2: NSColor = NSColor(calibratedRed: 0.38, green: 0.408, blue: 0.459, alpha: 1)
        static let lRGray3: NSColor = NSColor(calibratedRed: 0.192, green: 0.212, blue: 0.263, alpha: 1)
        static let lRGray4: NSColor = NSColor(calibratedRed: 0.365, green: 0.365, blue: 0.365, alpha: 1)
        static let lRBlack: NSColor = NSColor(calibratedRed: 0, green: 0, blue: 0, alpha: 1)
        static var imageOfWarningSign: NSImage?
    }

    //// Colors

    open class var lRLightOrange: NSColor { return Cache.lRLightOrange }
    open class var lROrange: NSColor { return Cache.lROrange }
    open class var lRBrown: NSColor { return Cache.lRBrown }
    open class var lRBlue: NSColor { return Cache.lRBlue }
    open class var lRWhite: NSColor { return Cache.lRWhite }
    open class var lRGray1: NSColor { return Cache.lRGray1 }
    open class var lRGray2: NSColor { return Cache.lRGray2 }
    open class var lRGray3: NSColor { return Cache.lRGray3 }
    open class var lRGray4: NSColor { return Cache.lRGray4 }
    open class var lRBlack: NSColor { return Cache.lRBlack }

    //// Drawing Methods

    open class func drawWarningSign() {

        //// Shadow Declarations
        let defaultShadow = NSShadow()
        defaultShadow.shadowColor = NSColor.black
        defaultShadow.shadowOffset = NSMakeSize(0.1, -4.1)
        defaultShadow.shadowBlurRadius = 5

        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSMakePoint(12.5, 17.39))
        bezierPath.curve(to: NSMakePoint(64, 112), controlPoint1: NSMakePoint(13.51, 18.26), controlPoint2: NSMakePoint(64, 112))
        bezierPath.line(to: NSMakePoint(116, 17))
        bezierPath.curve(to: NSMakePoint(12.5, 17.39), controlPoint1: NSMakePoint(116, 17), controlPoint2: NSMakePoint(11.49, 16.52))
        bezierPath.close()
        bezierPath.lineCapStyle = NSBezierPath.LineCapStyle.roundLineCapStyle
        bezierPath.lineJoinStyle = NSBezierPath.LineJoinStyle.roundLineJoinStyle
        NSGraphicsContext.saveGraphicsState()
        defaultShadow.set()
        StyleKit.lRLightOrange.setFill()
        bezierPath.fill()
        NSGraphicsContext.restoreGraphicsState()

        StyleKit.lROrange.setStroke()
        bezierPath.lineWidth = 10
        bezierPath.stroke()


        //// Text Drawing
        let textPath = NSBezierPath()
        textPath.move(to: NSMakePoint(68.55, 73.67))
        textPath.line(to: NSMakePoint(67.18, 48.32))
        textPath.curve(to: NSMakePoint(66.25, 46.19), controlPoint1: NSMakePoint(67.16, 47.46), controlPoint2: NSMakePoint(66.85, 46.75))
        textPath.curve(to: NSMakePoint(63.98, 45.35), controlPoint1: NSMakePoint(65.65, 45.63), controlPoint2: NSMakePoint(64.89, 45.35))
        textPath.curve(to: NSMakePoint(61.75, 46.19), controlPoint1: NSMakePoint(63.1, 45.35), controlPoint2: NSMakePoint(62.35, 45.63))
        textPath.curve(to: NSMakePoint(60.78, 48.32), controlPoint1: NSMakePoint(61.15, 46.75), controlPoint2: NSMakePoint(60.83, 47.46))
        textPath.line(to: NSMakePoint(59.45, 73.67))
        textPath.line(to: NSMakePoint(59.45, 74.06))
        textPath.curve(to: NSMakePoint(60.66, 77.64), controlPoint1: NSMakePoint(59.45, 75.57), controlPoint2: NSMakePoint(59.85, 76.76))
        textPath.curve(to: NSMakePoint(63.98, 78.95), controlPoint1: NSMakePoint(61.47, 78.51), controlPoint2: NSMakePoint(62.57, 78.95))
        textPath.curve(to: NSMakePoint(67.34, 77.64), controlPoint1: NSMakePoint(65.41, 78.95), controlPoint2: NSMakePoint(66.53, 78.51))
        textPath.curve(to: NSMakePoint(68.55, 74.06), controlPoint1: NSMakePoint(68.15, 76.76), controlPoint2: NSMakePoint(68.55, 75.57))
        textPath.line(to: NSMakePoint(68.55, 73.67))
        textPath.close()
        textPath.move(to: NSMakePoint(56.71, 35.35))
        textPath.curve(to: NSMakePoint(58.73, 39.8), controlPoint1: NSMakePoint(56.71, 37.17), controlPoint2: NSMakePoint(57.39, 38.66))
        textPath.curve(to: NSMakePoint(63.98, 41.52), controlPoint1: NSMakePoint(60.07, 40.95), controlPoint2: NSMakePoint(61.82, 41.52))
        textPath.curve(to: NSMakePoint(69.27, 39.8), controlPoint1: NSMakePoint(66.17, 41.52), controlPoint2: NSMakePoint(67.93, 40.95))
        textPath.curve(to: NSMakePoint(71.29, 35.35), controlPoint1: NSMakePoint(70.61, 38.66), controlPoint2: NSMakePoint(71.29, 37.17))
        textPath.curve(to: NSMakePoint(69.27, 30.84), controlPoint1: NSMakePoint(71.29, 33.5), controlPoint2: NSMakePoint(70.61, 32))
        textPath.curve(to: NSMakePoint(63.98, 29.1), controlPoint1: NSMakePoint(67.93, 29.68), controlPoint2: NSMakePoint(66.17, 29.1))
        textPath.curve(to: NSMakePoint(58.73, 30.86), controlPoint1: NSMakePoint(61.82, 29.1), controlPoint2: NSMakePoint(60.07, 29.69))
        textPath.curve(to: NSMakePoint(56.71, 35.35), controlPoint1: NSMakePoint(57.39, 32.03), controlPoint2: NSMakePoint(56.71, 33.53))
        textPath.close()
        StyleKit.lRWhite.setFill()
        textPath.fill()
    }

    //// Generated Images

    open class var imageOfWarningSign: NSImage {
        if Cache.imageOfWarningSign != nil {
            return Cache.imageOfWarningSign!
        }

        Cache.imageOfWarningSign = NSImage(size: NSMakeSize(128, 128), flipped: false) { (NSRect) -> Bool in 
                StyleKit.drawWarningSign()

            return true
        }

        return Cache.imageOfWarningSign!
    }

}
